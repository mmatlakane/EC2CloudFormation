AWSTemplateFormatVersion: "2010-09-09"
Description: "Restack EC2 Instance Baseline template"
Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: AWS::SSM::Parameter::Value<String>
    Default: /dev/ec2/instanceType

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64

  NameTag:
    Type: String
    Default: "TestInstance"

  CreatedbyTag:
    Type: String
    Default: "Mbali Matlakane"

  ScheduleTag:
    Type: String
    Default: "stop-at-5-sa"

  LaunchUserData:
    Description: Base64-encoded user data to launch EC2 instances.
    Type: String

Resources:
  MyEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      # KeyName: "gladman"
      BlockDeviceMappings:
      - DeviceName: /dev/sdc
        VirtualName: ephemeral0
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "LaunchUserData..." | base64 -d | bash
      Tags:
        - Key: "Name"
          Value: !Ref NameTag
        - Key: "Createdby"
          Value: !Ref CreatedbyTag
        - Key: "Schedule"
          Value: !Ref ScheduleTag
      SecurityGroups:
        - !Ref SSHSecurityGroup
        - !Ref ServerSecurityGroup
        - !Ref InstanceSecurityGroup

  #This block create a VPC with 2 subnets
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: 'eu-west-1a'

  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: 'eu-west-1b'

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      # VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      # SecurityGroupEgress:
      #   - IpProtocol: tcp
      #     FromPort: 80
      #     ToPort: 80
      #     CidrIp: 0.0.0.0/0

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22

  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow connections from specified CIDR ranges
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 192.168.1.1/32
Outputs:
  StackInstance:
    Description: The MyEC2Instance ID
    Value: !Ref MyEC2Instance
    Export:
      Name: !Sub "${AWS::StackName}-MyEC2Instance"

  OutputInstanceSecurityGroup:
    Description: A reference to the created security group
    Value: !Ref InstanceSecurityGroup
